
THE CHOICE OF A CHARACTER ENCODING SYSTEM FOR OPEN-APL

The openAPL project was started in response an observation that
the Linux console, could be configured to display APL characters. 
The kbd package contained an APL font file having all of the 
traditional characters in it.  After reading the Keyboard HOWTO 
document and the man pages for setfont and others, switching on 
the APL font proved quite easy.  But what to do with it?

Searching the Internet revealed the existance of a freely available 
APL (apl\11) along with several derivatives.  These all used the 
ASCII transliteration approach - only the character encoding 
differed between them. Early attempts at modifying the source code
were frustrated in several places where the input was being stripped
of its 8th bit.  Once this was overcome, a proof of concept was
demonstrated using only the characters iota and rho.  

The next step was to organise a suitable encoding scheme.  The preferred
system would be to adopt the Unicode standard.  This may yet happen,
however, it would have been too invasive of the existing code (that is,
it would require all character handling to be converted to multi byte),
and besides, I could not locate a copy of the Unicodes for APL characters.

Next best approach is to select an 8 bit scheme.  Several fonts at the
waterloo internet site described themselves as '2741'.  Great, we could
just use that - but close inspection of each revealed small differences. 
Well, was 2741 a standard or what?  A WWW search eventually turned up a 
reference to an IBM 2741 terminal.  Ahh, these fonts were trying to 
imitate an old APL character terminal, unfortunately this terminal used 
character codes from 0 to 31, ie the area used in ASCII for control codes, 
so the font files had to compromise.  Each moved some of the offending 
characters from below 31 to above 127.

At least two public domain DOS APL packages use an encoding labeled
as Code Page 910.  It's almost perfect for this job, except for one 
control character problem: the left arrow character is mapped to the 
ASCII code for Escape.

A choice had to be made. The alternatives were: a PostScript(TM) font 
- apl2741.fnt , the linux console font - aply16.psf , and an X11 
font - apl8.bdf.  The winner was apl2741.fnt for two reasons: (1) its
copyright provides for free use and distribution but only on the 
understanding that it is reproduced unaltered whereas the other two
are not encumbered by such a limitation so they could be adjusted
to match; and (2), by moving everything out of the control character
range it makes absolutely sure that nobody will ever suffer from control
character problems.  Yes, I know that reason (1) is a pathetic execuse
that favours material that is not totally free over material that is. 
However (2) is quite legitimate and besides, in the longer term it should 
be replaced with Unicode alternatives (any help in this regard would be 
appreciated).   

Given that the console and X11 fonts have been adapted to match the
encoding in the PostScript font, you would think that their character
sets would match one for one.  Closer inspection will reveal that
each has some characters that the others do not.  The definitive list 
of characters for openAPL is contained in the file char.h in the apl11 
directory along with the source code.  The font files should be regarded 
as being a super-set of this file.  Now here's a trap to watch out for 
if you intend to extend the language and upload your efforts to a public 
site: to introduce a character not currently used by apl11, you should
first check that your plans can be accommodated by appropriate 
adjustments to the font files (keeping in mind that apl2741.fnt is not 
licensed for modifications).

Two files are provided for testing:
000-255		a table containing all 256 8-bit combinations except 127
000-255.txt	as above except that 0 to 32 and 127 are represented
		in text so as to avoid problems with control character
		interpretation by the system being tested


SUPPORT OF OPEN-APL IN THE X11 ENVIRONMENT

When apl11 is executed, is expects to exchange APL characters through
standard IO (stdio).  Under the Linux console this is achieved with
help from the kbd package.  Under X11, IO is managed by the Server
where dealing with custom character sets is a little harder.  OpenAPL
integrates apl11 into X11 by wrapping a terminal emulator around it. 
Unlike other APLs, apl11 does not have an internal editor so an X11 
8 bit clean text editor is required.  

Fonts
-----
Most X11 programs accept a default font specification on their
command line thorugh the syntax "-fn <font>" where <font> is 
"apl8x13" for this release of openAPL.  This topic is continued 
at .../openAPL/terminal/X11R6/fonts/Design.Notes .

Keyboard Translation
--------------------
The relationship between keystrokes and characters is held in tables
internal to X11.  Unlike fonts which are localised to X11 programs at run
time, the key mapping tables affect the entire X11 session.  If you 
use an international character set, you may experience a clash between
the APL keyboard and your local keys.  The design of openAPL has attempted
to minimise any problems.  Xmodmap(1) is used to manipulate the key
mapping tables.  Two control files are used: 

apl2741.map 	which deals with keysym to key/character codes
modeswitch.map	which is used to set the Right ALT key to the "Mode Switch" 
		function (and this is not the same as "Compose")

Terminal Emulators
------------------
Unfortunately xterm proved impossible to configure for true 8 bit clean
opetation.  Eterm and kterm were considered, but these appear to be
targeted at Unicode environments which use 16 or more bits.  

Rxvt was eventually coaxed into service.  A major design goal of rxvt is 
for minimum memory usage.  To this end, most of its bells and whistles 
are optioned in or out at compile time - including its response to the
8th bit.  Instructions are provided in the installation guide to first 
check any existing rxvt, then if it is not properly 8-bit clean, to 
obtain and compile a copy of rxvt4apl.

--
This file is subject to the restrictions and privileges of the
GNU General Public License.
